-adce                           aggressive dead code elimination
-always-inline                  inline function
-barrier                        ?
-basicaa                        basic alias analysis (stateless)
-basicaa
-basiccg                        callgraph construction
-block-freq                     ?(analysis)
-branch-prob                    ?(analysis)
-correlated-propagation         ?         
-correlated-propagation
-deadargelim                    elim dead args
-domtree                        dom tree construction
-domtree
-domtree
-domtree
-domtree
-domtree
-dse                            dead store elim
-early-cse                      simple/fast common subexpression elim
-early-cse
-functionattrs                  mark readonly/readnone/nocapture
-globalopt                      global variable optimizer
-indvars                        canonicalize induction variable
-inline-cost                    ?
-instcombine                    instruction combining
-instcombine
-instcombine
-instcombine
-instcombine
-instcombine
-ipsccp                         interprocedural sparse conditional constant propagation
-jump-threading                 jump basic block for known branching
-jump-threading
-lazy-value-info                ?(analysis)
-lazy-value-info
-lcssa                          loop-closed SSA form (adding a unnecessary phinode)
-lcssa
-lcssa
-lcssa
-licm                           loop invariant code motion
-loop-deletion                  delete dead loops
-loop-idiom                     ?
-loop-rotate                    ?
-loop-simplify                  simplify cfg for loops
-loop-simplify
-loop-simplify
-loop-unroll                    loop unrolling
-loop-unroll
-loop-unswitch                  for-if => if-for
-loop-vectorize                 ?(http://llvm.org/docs/Vectorizers.html)
-loops                          ?(analysis)
-loops
-loops
-lower-expect                   ?
-memcpyopt                      related to memcpy/memset
-memdep                         mem dependence analysis
-memdep
-no-aa                          no alias analysis
-no-aa
-notti                          ?
-notti
-prune-eh                       remove unused exception handling
-reassociate                    reassociate commutative expressions
-scalar-evolution               ?(http://llvm.org/docs/Passes.html#scalar-evolution-scalar-evolution-analysis)
-scalar-evolution
-scalar-evolution
-sccp                           sparse conditional constant propagation
-simplifycfg                    simplify cfg
-simplifycfg
-simplifycfg
-simplifycfg
-simplifycfg
-simplifycfg
-sroa                           scalar replacement of aggregates (for better mem2reg)
-sroa
-strip-dead-prototypes          remove dead decls
-tailcallelim                   tail call elimination
-targetlibinfo                  ?
-targetlibinfo
-tbaa                           ?
-tbaa
-verify                         well-formedness check
-verify
-verify-di                      debug info verifier
-verify-di
